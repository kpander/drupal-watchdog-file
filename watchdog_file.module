<?php
/**
 * @file
 * Write Watchdog events to a local file.
 *
 * This is a replacement for the dblog module, for performance-sensitive sites.
 */


/**
 * Define the variable where we store the path/filename of the log file.
 */
define('WATCHDOG_FILE_VAR_FILENAME', 'watchdog_file_filename');

/**
 * Define the variable where we store the timestamp date format.
 */
define('WATCHDOG_FILE_VAR_DATE_FORMAT', 'watchdog_file_date_format');
define('WATCHDOG_FILE_DEFAULT_DATE_FORMAT', 'Y-m-d H:i:s');

/**
 * Define the log file format.
 */
define('WATCHDOG_FILE_VAR_LOG_FORMAT', 'watchdog_file_log_format');
define('WATCHDOG_FILE_DEFAULT_LOG_FORMAT', "[%date]\t[%severity]\t[%type]\t[uid=%uid]\t[%user]\t%message\turi=%uri\treferer=%referer\tlink=%link");

/**
 * Define the variable for storing which event severity types to log.
 */
define('WATCHDOG_FILE_VAR_INCLUDE_SEVERITY', 'watchdog_file_include_severity');
define('WATCHDOG_FILE_DEFAULT_INCLUDE_SEVERITY', "0,1,2,3,4,5,6");

/**
 * Define the variable for storing which event to ignore.
 */
define('WATCHDOG_FILE_VAR_EXCLUDE_KEYWORDS', 'watchdog_file_exclude_keywords');
define('WATCHDOG_FILE_DEFAULT_EXCLUDE_KEYWORDS', "");


/**
 * Implements hook_watchdog().
 */
function watchdog_file_watchdog(array $log_entry) {
  if (!watchdog_file_should_log_severity($log_entry)) {
    // We've been configured to ignore entries of this severity.
    return;
  }

  watchdog_file_write_record($log_entry);
}


/**
 * Determine if this particular log entry should be logged or ignored.
 */
function watchdog_file_should_log_severity($log_entry) {
  // Get the severity types we handle.
  $items = variable_get(WATCHDOG_FILE_VAR_INCLUDE_SEVERITY, explode(',', WATCHDOG_FILE_DEFAULT_INCLUDE_SEVERITY));
  if (!in_array($log_entry['severity'], $items)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Determine if this rendered log entry should be logged or excluded.
 */
function watchdog_file_should_log($line) {
  $keywords = variable_get(WATCHDOG_FILE_VAR_EXCLUDE_KEYWORDS, '');
  $keywords = explode("\n", $keywords);

  foreach ($keywords as $keyword) {
    $keyword = trim($keyword);
    if (empty($keyword)) {
      continue;
    }

    if (strpos($line, $keyword) !== FALSE) {
      return FALSE;
    }
  }

  return TRUE;
}


/**
 * Write a watchdog entry to the log file.
 */
function watchdog_file_write_record($log_entry) {
  $success = FALSE;

  $file = watchdog_file_get_log_filename();
  if (watchdog_file_is_writable($file)) {
    $data = watchdog_file_render_record($log_entry);
    if (watchdog_file_should_log($data)) {
      $success = file_put_contents($file, $data . "\n", FILE_APPEND);
    }
    else {
      return TRUE;
    }
  }

  if ($success === FALSE) {
    drupal_set_message(t("Error writing to watchdog_file log."), 'error');
  }

  return $success;
}


/**
 * Given a watchdog event record, format it for writing to the log file.
 *
 * @param array $log_entry
 *   An associative array representing a single watchdog event. 
 *
 * @return string
 *   Returns the formatted log entry string.
 */
function watchdog_file_render_record($log_entry) {
  $levels = watchdog_severity_levels();

  $user  = (isset($log_entry['uid']) && (int) $log_entry['uid'] > 0) ? $log_entry['user']->name : 'anon';
  $user .= ' ' . $log_entry['ip'];

  $message_vars = $log_entry['variables'];
  if (!is_array($message_vars)) {
    $message_vars = array();
  };

  $vars = array(
    '%date'     => date(variable_get(WATCHDOG_FILE_VAR_DATE_FORMAT, WATCHDOG_FILE_DEFAULT_DATE_FORMAT), $log_entry['timestamp']),
    '%severity' => $levels[$log_entry['severity']],
    '%type'     => $log_entry['type'],
    '%uid'      => $log_entry['uid'],
    '%user'     => $user,
    '%message'  => strip_tags(t($log_entry['message'], $message_vars)),
    '%uri'      => $log_entry['request_uri'],
    '%referer'  => $log_entry['referer'],
    '%link'     => strip_tags($log_entry['link']),
  );

  $template = variable_get(WATCHDOG_FILE_VAR_LOG_FORMAT, WATCHDOG_FILE_DEFAULT_LOG_FORMAT);
  $data     = strtr($template, $vars);

  // Replace some encoded entities for readability.
  $data = str_replace('&gt;', '>', $data);
  $data = str_replace('&lt;', '<', $data);

  return $data;
}


/**
 * Check if we're allowed to write to the log file.
 *
 * @param string $file
 *   The full path/filename to check if it's writable.
 *
 * @return boolean
 *   Returns TRUE if the given file is writable.
 *   Returns FALSE if the given file is not writable.
 */
function watchdog_file_is_writable($file) {
  // The defined log file doesn't exist yet. Try to create it.
  if (!file_exists($file)) {
    if (!touch($file)) {
      return FALSE;
    }
  }

  return is_writable($file);
}


/**
 * Get the watchdog log filename.
 *
 * @return string
 */
function watchdog_file_get_log_filename() {
  $file = variable_get(WATCHDOG_FILE_VAR_FILENAME, '');
  return watchdog_file_expand_filename_vars($file);
}

/**
 * Expand any timestamp variables in the log file filename.
 *
 * @param string $file
 *   The raw log filename, without timestamp variables (if any) expanded.
 *
 * @return string
 */
function watchdog_file_expand_filename_vars($file) {
  $replacements = array(
    '%d'  => date('d', REQUEST_TIME), // day of month, 01 to 31
    '%w'  => date('w', REQUEST_TIME), // day of week, 0 (Sun) to 6 (Sat)
    '%z'  => date('z', REQUEST_TIME), // day of year, 0 to 365
    '%m'  => date('m', REQUEST_TIME), // month, 01 to 12
    '%Y'  => date('Y', REQUEST_TIME), // year, e.g. 1999
  );

  return strtr($file, $replacements);
}
